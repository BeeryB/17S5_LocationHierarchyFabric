{"version":3,"file":"SwatchColorPicker.base.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/SwatchColorPicker.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  autobind,\r\n  BaseComponent,\r\n  findIndex,\r\n  getId,\r\n  customizable\r\n} from '../../Utilities';\r\nimport {\r\n  ISwatchColorPicker,\r\n  ISwatchColorPickerProps,\r\n  ISwatchColorPickerStyleProps,\r\n  ISwatchColorPickerStyles\r\n} from './SwatchColorPicker.types';\r\nimport { Grid } from '../../utilities/grid/Grid';\r\nimport { IColorCellProps } from './ColorPickerGridCell.types';\r\nimport { ColorPickerGridCell } from './ColorPickerGridCell';\r\nimport { mergeStyleSets } from '../../Styling';\r\nimport { classNamesFunction } from '../../Utilities';\r\n\r\nexport interface ISwatchColorPickerState {\r\n  selectedIndex?: number;\r\n}\r\n\r\nconst getClassNames = classNamesFunction<ISwatchColorPickerStyleProps, ISwatchColorPickerStyles>();\r\n\r\n@customizable('SwatchColorPicker', ['theme'])\r\nexport class SwatchColorPickerBase extends BaseComponent<ISwatchColorPickerProps, ISwatchColorPickerState> implements ISwatchColorPicker {\r\n\r\n  public static defaultProps = {\r\n    cellShape: 'circle',\r\n    disabled: false,\r\n    shouldFocusCircularNavigate: true\r\n  } as ISwatchColorPickerProps;\r\n\r\n  private _id: string;\r\n\r\n  constructor(props: ISwatchColorPickerProps) {\r\n    super(props);\r\n\r\n    this._id = props.id || getId('swatchColorPicker');\r\n\r\n    let selectedIndex: number | undefined;\r\n    if (props.selectedId) {\r\n      selectedIndex = this._getSelectedIndex(props.colorCells, props.selectedId);\r\n    }\r\n\r\n    this.state = {\r\n      selectedIndex\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: ISwatchColorPickerProps) {\r\n    let newSelectedIndex;\r\n\r\n    if (newProps.selectedId) {\r\n      newSelectedIndex = this._getSelectedIndex(newProps.colorCells, newProps.selectedId);\r\n    }\r\n\r\n    if (newSelectedIndex !== this.state.selectedIndex) {\r\n      this.setState({\r\n        selectedIndex: newSelectedIndex\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      colorCells,\r\n      columnCount,\r\n      positionInSet,\r\n      setSize,\r\n      shouldFocusCircularNavigate,\r\n      className,\r\n      doNotContainWithinFocusZone,\r\n      disabled,\r\n      getStyles,\r\n    } = this.props;\r\n\r\n    const classNames = getClassNames(\r\n      getStyles!,\r\n      {\r\n        theme: this.props.theme!,\r\n        className,\r\n      }\r\n    );\r\n\r\n    if (colorCells.length < 1 || columnCount < 1) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Grid\r\n        items={ colorCells.map((item, index) => { return { ...item, index }; }) }\r\n        columnCount={ columnCount }\r\n        onRenderItem={ this._renderOption }\r\n        positionInSet={ positionInSet && positionInSet }\r\n        setSize={ setSize && setSize }\r\n        shouldFocusCircularNavigate={ shouldFocusCircularNavigate }\r\n        doNotContainWithinFocusZone={ doNotContainWithinFocusZone }\r\n        onBlur={ this._onSwatchColorPickerBlur }\r\n        containerClassName={ classNames.root }\r\n      />);\r\n  }\r\n\r\n  /**\r\n   * When the whole swatchColorPicker is blurred,\r\n   * make sure to clear the pending focused stated\r\n   */\r\n  @autobind\r\n  private _onSwatchColorPickerBlur() {\r\n    if (this.props.onCellFocused) {\r\n      this.props.onCellFocused();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the selected item's index\r\n   * @param items - The items to search\r\n   * @param selectedId - The selected item's id to find\r\n   * @returns {number} - The index of the selected item's id, -1 if there was no match\r\n   */\r\n  private _getSelectedIndex(items: IColorCellProps[], selectedId: string): number | undefined {\r\n    let selectedIndex = findIndex(items, (item => (item.id === selectedId)));\r\n    return selectedIndex >= 0 ? selectedIndex : undefined;\r\n  }\r\n\r\n  private _isSelected(index: number): boolean {\r\n    return this.state.selectedIndex !== undefined && (this.state.selectedIndex === index);\r\n  }\r\n\r\n  /**\r\n   * Render a color cell\r\n   * @param item - The item to render\r\n   * @returns {JSX.Element} - Element representing the item\r\n   */\r\n  @autobind\r\n  private _renderOption(item: IColorCellProps): JSX.Element {\r\n    let id = this._id;\r\n\r\n    return (\r\n      <ColorPickerGridCell\r\n        item={ item }\r\n        id={ id }\r\n        color={ item.color }\r\n        getStyles={ this.props.getColorGridCellStyles }\r\n        disabled={ this.props.disabled }\r\n        onClick={ this._onCellClick }\r\n        onHover={ this._onGridCellHovered }\r\n        onFocus={ this._onGridCellFocused }\r\n        selected={ this.state.selectedIndex !== undefined && (this.state.selectedIndex === item.index) }\r\n        circle={ this.props.cellShape === 'circle' }\r\n        label={ item.label }\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Callback passed to the GridCell class that will trigger the onCellHovered callback of the SwatchColorPicker\r\n   */\r\n  @autobind\r\n  private _onGridCellHovered(item?: IColorCellProps): void {\r\n    if (this.props && this.props.onCellHovered) {\r\n      if (item) {\r\n        this.props.onCellHovered(item.id, item.color);\r\n      } else {\r\n        this.props.onCellHovered();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback passed to the GridCell class that will trigger the onCellFocus callback of the SwatchColorPicker\r\n   */\r\n  @autobind\r\n  private _onGridCellFocused(item?: IColorCellProps): void {\r\n    if (this.props && this.props.onCellFocused) {\r\n      if (item) {\r\n        this.props.onCellFocused(item.id, item.color);\r\n      } else {\r\n        this.props.onCellFocused();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle the click on a cell\r\n   * @param item - The cell that the click was fired against\r\n   */\r\n  @autobind\r\n  private _onCellClick(item: IColorCellProps) {\r\n    if (this.props.disabled) {\r\n      return;\r\n    }\r\n\r\n    let index = item.index as number;\r\n\r\n    // If we have a valid index and it is not already\r\n    // selected, select it\r\n    if (index >= 0 && index !== this.state.selectedIndex) {\r\n      if (this.props.onColorChanged) {\r\n        this.props.onColorChanged(item.id, item.color);\r\n      }\r\n\r\n      this.setState({\r\n        selectedIndex: index\r\n      });\r\n    }\r\n  }\r\n}"]}