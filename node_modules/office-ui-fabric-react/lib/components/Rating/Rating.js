"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var Utilities_1 = require("../../Utilities");
var Icon_1 = require("../../Icon");
var FocusZone_1 = require("../../FocusZone");
var Rating_types_1 = require("./Rating.types");
var stylesImport = require("./Rating.scss");
var Utilities_2 = require("../../Utilities");
var styles = stylesImport;
var RatingStar = function (props) {
    return (React.createElement("div", { className: Utilities_1.css('ms-RatingStar-container', styles.ratingStar), key: props.id },
        React.createElement(Icon_1.Icon, { className: Utilities_1.css('ms-RatingStar-back', styles.ratingStarBack, (_a = {},
                _a['is-disabled ' + styles.ratingStarDisabled] = props.disabled,
                _a)), iconName: 'FavoriteStarFill' }),
        !props.disabled &&
            React.createElement(Icon_1.Icon, { className: Utilities_1.css('ms-RatingStar-front', styles.ratingStarFront), iconName: 'FavoriteStarFill', style: { width: props.fillPercentage + '%' } })));
    var _a;
};
var Rating = /** @class */ (function (_super) {
    tslib_1.__extends(Rating, _super);
    function Rating(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            rating: _this._getInitialValue(props)
        };
        _this._id = Utilities_1.getId('Rating');
        _this._labelId = Utilities_1.getId('RatingLabel');
        return _this;
    }
    Rating.prototype.componentWillReceiveProps = function (nextProps) {
        if (typeof nextProps.rating !== 'undefined' && nextProps.rating !== this.state.rating) {
            this.setState({
                rating: this._getClampedRating(nextProps.rating)
            });
        }
    };
    Rating.prototype.render = function () {
        var stars = [];
        for (var i = this.props.min; i <= this.props.max; i++) {
            var ratingStarProps = {
                fillPercentage: this._getFillingPercentage(i),
                disabled: this.props.disabled ? true : false
            };
            stars.push(React.createElement("button", tslib_1.__assign({ className: Utilities_1.css('ms-Rating-button', styles.ratingButton, (_a = {},
                    _a['ms-Rating--large ' + styles.rootIsLarge] = this.props.size === Rating_types_1.RatingSize.Large,
                    _a['ms-Rating--small ' + styles.rootIsSmall] = this.props.size !== Rating_types_1.RatingSize.Large,
                    _a)), key: i }, ((i === Math.ceil(this.state.rating)) ? { 'data-is-current': true } : {}), { onFocus: this._onFocus.bind(this, i), disabled: this.props.disabled || this.props.readOnly ? true : false, role: 'presentation' }),
                this._getLabel(i),
                React.createElement(RatingStar, tslib_1.__assign({ key: i + 'rating' }, ratingStarProps))));
        }
        return (React.createElement("div", { className: Utilities_1.css('ms-Rating-star'), "aria-label": this.props.getAriaLabel ? this.props.getAriaLabel(this.state.rating ? this.state.rating : 0, this.props.max) : '' },
            React.createElement(FocusZone_1.FocusZone, { direction: FocusZone_1.FocusZoneDirection.horizontal, tabIndex: this.props.readOnly ? 0 : -1, className: Utilities_1.css('ms-Rating-focuszone', styles.ratingFocusZone) }, stars)));
        var _a;
    };
    Rating.prototype._onFocus = function (value, ev) {
        this.setState({
            rating: value
        });
        var onChanged = this.props.onChanged;
        if (onChanged) {
            onChanged(value);
        }
    };
    Rating.prototype._getLabel = function (rating) {
        var text = this.props.ariaLabelFormat || '';
        return (React.createElement("span", { id: this._labelId + "-" + rating, className: Utilities_1.css('ms-Rating-labelText', styles.labelText) }, Utilities_2.format(text, rating, this.props.max)));
    };
    Rating.prototype._getInitialValue = function (props) {
        if (typeof props.rating === 'undefined') {
            return props.min;
        }
        if (props.rating === null) {
            return null;
        }
        return this._getClampedRating(props.rating);
    };
    Rating.prototype._getClampedRating = function (rating) {
        return Math.min(Math.max(rating, this.props.min), this.props.max);
    };
    Rating.prototype._getFillingPercentage = function (starPosition) {
        var ceilValue = Math.ceil(this.state.rating);
        var fillPercentage = 100;
        if (starPosition === this.state.rating) {
            fillPercentage = 100;
        }
        else if (starPosition === ceilValue) {
            fillPercentage = 100 * (this.state.rating % 1);
        }
        else if (starPosition > ceilValue) {
            fillPercentage = 0;
        }
        return fillPercentage;
    };
    Rating.defaultProps = {
        min: 1,
        max: 5
    };
    return Rating;
}(Utilities_1.BaseComponent));
exports.Rating = Rating;
//# sourceMappingURL=Rating.js.map