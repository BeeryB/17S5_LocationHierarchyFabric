{"version":3,"file":"ColorPickerGridCell.base.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/ColorPickerGridCell.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  autobind,\r\n  customizable\r\n} from '../../Utilities';\r\nimport {\r\n  IColorCellProps,\r\n  IColorPickerGridCellProps,\r\n  IColorPickerGridCellStyleProps,\r\n  IColorPickerGridCellStyles\r\n} from './ColorPickerGridCell.types';\r\nimport { getColorFromString } from '../../utilities/color/colors';\r\nimport { GridCell } from '../../utilities/grid/GridCell';\r\nimport { IGridCellProps } from '../../utilities/grid/GridCell.types';\r\nimport { IButtonClassNames } from '../Button/BaseButton.classNames';\r\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\r\nimport { mergeStyleSets, ITheme } from '../../Styling';\r\nimport { classNamesFunction } from '../../Utilities';\r\n\r\nconst getClassNames = classNamesFunction<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>();\r\n\r\nclass ColorCell extends GridCell<IColorCellProps, IGridCellProps<IColorCellProps>> {\r\n}\r\n\r\n@customizable('ColorPickerGridCell', ['theme'])\r\nexport class ColorPickerGridCellBase extends React.Component<IColorPickerGridCellProps, {}> {\r\n\r\n  public static defaultProps = {\r\n    circle: true,\r\n    disabled: false,\r\n    selected: false,\r\n  } as IColorPickerGridCellProps;\r\n\r\n  private _classNames: {[key in keyof IColorPickerGridCellStyles]: string };\r\n\r\n  public render() {\r\n    let {\r\n      item,\r\n      id,\r\n      selected,\r\n      disabled,\r\n      getStyles,\r\n      theme,\r\n      circle\r\n    } = this.props;\r\n\r\n    this._classNames = getClassNames(\r\n      getStyles!,\r\n      {\r\n        theme: theme!,\r\n        disabled,\r\n        selected,\r\n        circle,\r\n        isWhite: this._isWhiteCell(this.props.color)\r\n      }\r\n    );\r\n\r\n    return (\r\n      <ColorCell\r\n        item={ item }\r\n        id={ id }\r\n        key={ item.id }\r\n        disabled={ disabled }\r\n        role={ 'gridcell' }\r\n        onRenderItem={ this._onRenderColorOption }\r\n        selected={ selected }\r\n        onClick={ this.props.onClick }\r\n        onHover={ this.props.onHover }\r\n        onFocus={ this.props.onFocus }\r\n        label={ item.label }\r\n        className={ this._classNames.colorCell }\r\n        getClassNames={ this._getClassNames }\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n * Render the core of a color cell\r\n * @returns {JSX.Element} - Element representing the core of the item\r\n */\r\n  @autobind\r\n  private _onRenderColorOption(colorOption: IColorCellProps): JSX.Element {\r\n    // Build an SVG for the cell with the given shape and color properties\r\n    return (\r\n      <svg className={ this._classNames.svg } viewBox='0 0 20 20' fill={ getColorFromString(colorOption.color as string)!.str } >\r\n        {\r\n          this.props.circle ?\r\n            <circle cx='50%' cy='50%' r='50%' /> :\r\n            <rect width='100%' height='100%' />\r\n        }\r\n      </svg>\r\n    );\r\n  }\r\n\r\n  /**\r\n* Validate if the cell's color is white or not to apply whiteCell style\r\n* @param inputColor - The color of the current cell\r\n* @returns - Whether the cell's color is white or not.\r\n*/\r\n  private _isWhiteCell(inputColor: string | undefined): boolean {\r\n    return inputColor!.toLocaleLowerCase() === '#ffffff';\r\n  }\r\n\r\n  /**\r\n   * Method to override the getClassNames func in a button.\r\n   */\r\n  @autobind\r\n  private _getClassNames(\r\n    theme: ITheme,\r\n    className: string,\r\n    variantClassName: string,\r\n    iconClassName: string | undefined,\r\n    menuIconClassName: string | undefined,\r\n    disabled: boolean,\r\n    checked: boolean,\r\n    expanded: boolean,\r\n    isSplit: boolean | undefined): IButtonClassNames {\r\n    let styles = getActionButtonStyles(theme);\r\n    return mergeStyleSets(this._classNames as {}, {\r\n      root: [\r\n        'ms-Button',\r\n        styles.root,\r\n        variantClassName,\r\n        className,\r\n        checked && [\r\n          'is-checked',\r\n          styles.rootChecked\r\n        ],\r\n        disabled && [\r\n          'is-disabled',\r\n          styles.rootDisabled\r\n        ],\r\n        !disabled && !checked && {\r\n          selectors: {\r\n            ':hover': styles.rootHovered,\r\n            ':focus': styles.rootFocused,\r\n            ':active': styles.rootPressed,\r\n          }\r\n        },\r\n        disabled && checked && [\r\n          styles.rootCheckedDisabled\r\n        ],\r\n        !disabled && checked && {\r\n          selectors: {\r\n            ':hover': styles.rootCheckedHovered,\r\n            ':active': styles.rootCheckedPressed\r\n          }\r\n        }\r\n      ],\r\n      flexContainer: [\r\n        'ms-Button-flexContainer',\r\n        styles.flexContainer\r\n      ]\r\n    });\r\n  }\r\n\r\n}"]}